import {
  FETCH_PHONES_START,
  FETCH_PHONES_SUCCESS,
  FETCH_PHONES_FAILURE,
  LOAD_MORE_PHONES_START,
  LOAD_MORE_PHONES_SUCCESS,
  LOAD_MORE_PHONES_FAILURE,
  FETCH_PHONE_BY_ID_START,
  FETCH_PHONE_BY_ID_SUCCESS,
  FETCH_PHONE_BY_ID_FAILURE,
  ADD_PHONE_TO_BASKET,
  SEARCH_PHONE,
  FETCH_CATEGORIES_START,
  FETCH_CATEGORIES_SUCCESS,
  FETCH_CATEGORIES_FAILURE,
  REMOVE_PHONE_FROM_BASKET,
  CLEAN_BASKET,
  USER_START,
  USER_SUCCESS,
  USER_FAILURE,
  USER_CREATE_START,
  USER_CREATE_SUCCESS,
  USER_CREATE_FAILURE,
  USER_LOGIN_START,
  USER_LOGIN_SUCCESS,
  USER_LOGIN_FAILURE,
  USER_DELETE_START,
  USER_DELETE_SUCCESS,
  USER_DELETE_FAILURE

} from 'actionTypes'
import {getRenderedPhonesLength} from 'selectors'
import {
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi,
  fetchPhoneById as fetchPhoneByIdApi,
  fetchCategories as fetchCategoriesApi,
  getUsers as fetchUsersApi,
  createUser as createUserApi,
  loginUser as loginUserApi,
  deleteUser  as  deleteUserApi
} from 'api'

export const fetchPhones = () => async dispatch => {
  dispatch({type: FETCH_PHONES_START})

  try {
    const phones = await fetchPhonesApi();
    dispatch({
      type: FETCH_PHONES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: FETCH_PHONES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const loadMorePhones = () => async (dispatch, getState) => {
  const offset = getRenderedPhonesLength(getState())

  dispatch({type: LOAD_MORE_PHONES_START})

  try {
    const phones = await loadMorePhonesApi({offset})
    dispatch({
      type: LOAD_MORE_PHONES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: LOAD_MORE_PHONES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const fetchPhoneById = (id) => async dispatch => {
  dispatch({type: FETCH_PHONE_BY_ID_START})

  try {
    const phone = await fetchPhoneByIdApi(id)
    dispatch({
      type: FETCH_PHONE_BY_ID_SUCCESS,
      payload: phone
    })
  } catch (err) {
    dispatch({
      type: FETCH_PHONE_BY_ID_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const addPhoneToBasket = id => dispatch => {
  dispatch({
    type: ADD_PHONE_TO_BASKET,
    payload: id
  })
};

export const searchPhone = (text) => dispatch => {
  dispatch({
    type: SEARCH_PHONE,
    payload: text
  })
}

export const fetchCategories = () => async dispatch => {
  dispatch({type: FETCH_CATEGORIES_START})

  try {
    const phones = await fetchCategoriesApi()
    dispatch({
      type: FETCH_CATEGORIES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: FETCH_CATEGORIES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const removePhoneFromBasket = id => async dispatch => {
  dispatch({
    type: REMOVE_PHONE_FROM_BASKET,
    payload: id
  })
}

export const cleanBasket = () => dispatch => {
  dispatch({
    type: CLEAN_BASKET
  })
}


export const basketCheckout = phones => () => {
  alert(JSON.stringify(phones))
}


export const fetchUsers = () => async dispatch => {
    dispatch({type: USER_START});
    try {
        const users = await fetchUsersApi();
        dispatch({
            type: USER_SUCCESS,
            payload: users
        })
    } catch (err) {
        dispatch({
            type: USER_FAILURE,
            payload: err,
            error: true
        })
    }
};
export const createUser = (data) => async dispatch => {
    dispatch({type: USER_CREATE_START});
    try {
        const users = await createUserApi(data);
        dispatch({
            type: USER_CREATE_SUCCESS,
            payload: users
        })
    } catch (err) {
        dispatch({
            type: USER_CREATE_FAILURE,
            payload: err,
            error: true
        })
    }
};
export const deleteUser = (data) => async dispatch => {
    dispatch({type: USER_DELETE_START});
    try {
        const users = await deleteUserApi(data);
        dispatch({
            type: USER_DELETE_SUCCESS,
            payload: users
        })
    } catch (err) {
        dispatch({
            type: USER_DELETE_FAILURE,
            payload: err,
            error: true
        })
    }
};
export const login = (data) => async dispatch => {
    dispatch({type: USER_LOGIN_START});
    try {
        const user = await loginUserApi(data);
        dispatch({
            type: USER_LOGIN_SUCCESS,
            payload: user
        })
    } catch (err) {
        dispatch({
            type: USER_LOGIN_FAILURE,
            payload: err,
            error: true
        })
    }
};